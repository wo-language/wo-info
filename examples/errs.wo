package examples

import "strings"

func runProgram(directory <string|url>) (int, string)! { // members reversed to order by relevancy
if !var fileName = runnableFiles[directory] {
return errors.New("invalid filepath")
}

var reader = os.Open(fileName)!
    defer reader.Close()!
    reader.Sync()!
    var program = myCompiler.build(reader)
    return program.length(), program.outputPath() // converts it to some(int, string) and error as nil/none
}

runnableFiles map[FilePath]string = {"/app/host": "server.ts", "/": "Main.java"}

func runProgram() string {
    output, log(err) = runProgram("/")
    return output
}

struct Program {
    byte[...] executable
    func outputPath() string {
        return executable[:executable.LastIndex(".exe")]
    }

    func length() int {
        len(executable)
    }
}

interface FilePath {
    string | url
}

/*
| Go                                                                                                                                                                                     | Wo with types before name                                                                                                                                                |
|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| <pre>var fs = map[FilePath]string</pre>                                                                                                                                                | <pre>map[FilePath, string] runnableFiles</pre>                                                                                                                           |
| <pre>func runProgramO(dir interface{string:url})</pre>                                                                                                                                 | <pre>runProgram(<string:url> directory)</pre>                                                                                                                            |
| <pre>&emsp;f, ok = fs[dir]<br>&emsp;if (!ok) {<br>&emsp;&emsp;return nil, errors.New("invalid filepath")<br>&emsp;}</pre>                                                              | <pre>&emsp;fileName, if(!ok) = runnableFiles[directory] {<br>&emsp;&emsp;throw error("invalid filepath")<br>&emsp;}<br><br></pre>                                        |
| <pre>&emsp;r, err := os.Open(f)<br>&emsp;if err != nil {<br>&emsp;&emsp;return nil, err<br>&emsp;}                                                                                     | <pre>&emsp;*File reader = os.Open(fileName)!<br><br><br><br></pre>                                                                                                       |
| <pre>&emsp;defer func() {<br>&emsp;&emsp;if err := r.Close(); err != nil {<br>&emsp;&emsp;&emsp;return nil, err<br>&emsp;&emsp;}<br>&emsp;}()</pre>                                    | <pre>&emsp;defer reader.Close()!<br><br><br><br><br></pre>                                                                                                               |
| <pre>type Program struct {<br>&emsp;executable [...]byte<br>}<br>func (p Program*) output() string {<br>&emsp;return p.executable[:strings.LastIndex(p.executable, ".exe"))<br>}</pre> | <pre>struct Program {<br>&emsp;byte[...] executable<br>&emsp;string outputPath() {<br>&emsp;&emsp;return executable[:executable.LastIndex(".exe")]<br>&emsp;}<br>}</pre> |
*/
